import streamlit as st
from dotenv import load_dotenv
import os
import json

# to run the app, use the command: python.exe -m streamlit run app.py

# Nh·∫≠p c√°c modules c·∫ßn thi·∫øt
from config import APP_TITLE, APP_ICON, APP_LAYOUT
from api.openai_api import validate_api_key
from ui.components import display_user_message, display_assistant_response, render_sidebar, display_chat_history
from services.data_service import process_query
from services.chat_history_service import save_chat_history, load_chat_history

# Load bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
def set_theme(theme):
    config_path = ".streamlit/config.toml"
    if theme == "S√°ng":
        config = """
[theme]
primaryColor="#1a2980"
backgroundColor="#ffffff"
secondaryBackgroundColor="#f0f2f6"
textColor="#262730"
font="sans serif"
"""
    else:
        config = """
[theme]
primaryColor="#26d0ce"
backgroundColor="#18191A"
secondaryBackgroundColor="#222"
textColor="#FAFAFA"
font="sans serif"
"""
    os.makedirs(".streamlit", exist_ok=True)
    with open(config_path, "w", encoding="utf-8") as f:
        f.write(config)
def main():
    # Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
    st.set_page_config(
        page_title=APP_TITLE, 
        page_icon=APP_ICON, 
        layout=APP_LAYOUT,
        initial_sidebar_state="expanded"
    )
    

    # App Header
    st.markdown("""
    <div style="
        background: linear-gradient(120deg, #1a2980, #26d0ce); 
        padding: 8px 15px; 
        border-radius: 12px; 
        text-align: center; 
        margin-bottom: 15px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        border: 1px solid rgba(255,255,255,0.2);
        position: relative;
        overflow: hidden;
    ">
        <div style="
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: linear-gradient(
                to right,
                rgba(255,255,255,0) 0%,
                rgba(255,255,255,0.3) 50%,
                rgba(255,255,255,0) 100%
            );
            transform: rotate(30deg);
            animation: shine 3s infinite;
        "></div>
        <h1 style="
            color: white; 
            font-size: 32px; 
            font-weight: bold; 
            margin: 5px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        ">
             VIETNAM STOCK MARKET Q&A üìà
        </h1>
        <p style="
            color: rgba(255,255,255,0.9); 
            font-size: 16px; 
            margin: 0px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
        ">
            H·ªèi ƒë√°p th√¥ng tin v·ªÅ ch·ª©ng kho√°n Vi·ªát Nam
        </p>
    </div>
    <style>
    @keyframes shine {
        0% {transform: translateX(-100%) rotate(30deg);}
        100% {transform: translateX(100%) rotate(30deg);}
    }
    </style>
    """, unsafe_allow_html=True)
    
    # X√°c th·ª±c API key
    openai_api_key = validate_api_key()
    if not openai_api_key:
        return
    ls = load_chat_history()
    forget_messages = {
        "role": "system",
        "content": "ƒê√£ h·∫øt phi√™n tr√≤ chuy·ªán, vui l√≤ng nh·∫≠p c√¢u h·ªèi m·ªõi.V·ªöI TH√îNG TIN LI√äN QUAN ƒê·∫æN C·ªî PHI·∫æU, C√îNG TY CH·ªà S·ª¨ D·ª§NG TH√îNG TIN TRONG PHI√äN C·ª¶A M√åNH (KH√îNG S·ª¨ D·ª§NG C·ª¶A PHI√äN TR∆Ø·ªöC), C√íN C√ÅC Y√äU C·∫¶U C√Å NH√ÇN H√ìA TH√å KH√îNG GI·ªöI H·∫†N TRONG PHI√äN, B·∫†N C·∫¶N GHI NH·ªö T·∫§T C·∫¢ V√Ä TH·ª∞C HI·ªÜN CHO ƒê√öNG"
    }
    ls.append(forget_messages)  # Th√™m tin nh·∫Øn qu√™n l·ªãch s·ª≠ v√†o l·ªãch s·ª≠ chat
    save_chat_history(ls)  # L∆∞u tin nh·∫Øn qu√™n l·ªãch s·ª≠ v√†o file

    # T·∫£i l·ªãch s·ª≠ tr√≤ chuy·ªán t·ª´ file
    if 'messages' not in st.session_state:
        st.session_state.messages = load_chat_history()

    
    # Kh·ªüi t·∫°o session state cho phi√™n hi·ªán t·∫°i
    if 'current_message' not in st.session_state:
        st.session_state.current_message = None
    theme = st.sidebar.selectbox("Ch·ªçn giao di·ªán", ["S√°ng", "T·ªëi"], key="theme_select")
    if "last_theme" not in st.session_state:
        st.session_state.last_theme = theme
    if theme != st.session_state.last_theme:
        set_theme(theme)
        st.session_state.last_theme = theme
        st.rerun()
    # Hi·ªÉn th·ªã sidebar
    render_sidebar()
    
    # KH√îNG hi·ªÉn th·ªã l·ªãch s·ª≠ chat, ch·ªâ hi·ªÉn th·ªã tin nh·∫Øn hi·ªán t·∫°i
    # if st.session_state.current_message:
    #     if st.session_state.current_message["role"] == "user":
    #         display_user_message(st.session_state.current_message["content"])
    #     else:
    #         with st.chat_message("assistant"):
    #             display_assistant_response(
    #                 st.session_state.current_message["content"],
    #                 st.session_state.current_message.get("data")
    #             )
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ tr√≤ chuy·ªán CH·ªà TRONG PHI√äN HI·ªÜN T·∫†I
    if 'messages' in st.session_state and st.session_state.messages:
        # T√¨m index c·ªßa tin nh·∫Øn "ƒê√£ h·∫øt phi√™n tr√≤ chuy·ªán" cu·ªëi c√πng
        last_session_end_idx = -1
        for i, msg in enumerate(st.session_state.messages):
            if msg["role"] == "system" and "ƒê√£ h·∫øt phi√™n tr√≤ chuy·ªán" in msg["content"]:
                last_session_end_idx = i
        
        # L·∫•y ch·ªâ c√°c tin nh·∫Øn sau tin nh·∫Øn "ƒê√£ h·∫øt phi√™n tr√≤ chuy·ªán" cu·ªëi c√πng
        current_session_msgs = st.session_state.messages[last_session_end_idx+1:]
        
        # L·ªçc b·ªè tin nh·∫Øn h·ªá th·ªëng
        current_session_msgs = [msg for msg in current_session_msgs 
                            if msg["role"] in ["user", "assistant"]]
        
        # Hi·ªÉn th·ªã tin nh·∫Øn trong phi√™n hi·ªán t·∫°i
        display_chat_history(current_session_msgs)
    # X·ª≠ l√Ω ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng
    query = st.chat_input("H·ªèi th√¥ng tin v·ªÅ ch·ª©ng kho√°n...")
    if query:
        # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
        display_user_message(query)
        
        # C·∫≠p nh·∫≠t tin nh·∫Øn hi·ªán t·∫°i
        st.session_state.current_message = {"role": "user", "content": query}
        
        # Th√™m v√†o l·ªãch s·ª≠ chat (kh√¥ng hi·ªÉn th·ªã)
        st.session_state.messages.append({"role": "user", "content": query})
        
        # X·ª≠ l√Ω truy v·∫•n
        with st.chat_message("assistant"):
            thinking_placeholder = st.empty()
            thinking_placeholder.markdown("‚è≥ ƒêang t√¨m ki·∫øm th√¥ng tin...")
            
            # X·ª≠ l√Ω truy v·∫•n v√† l·∫•y k·∫øt qu·∫£
            response_content, data = process_query(query, openai_api_key, thinking_placeholder)
            
            # Hi·ªÉn th·ªã ph·∫£n h·ªìi
            display_assistant_response(response_content, data)
        
        # C·∫≠p nh·∫≠t tin nh·∫Øn hi·ªán t·∫°i
        st.session_state.current_message = {
            "role": "assistant", 
            "content": response_content,
            "data": data
        }
        
        # Th√™m v√†o l·ªãch s·ª≠ chat (kh√¥ng hi·ªÉn th·ªã)
        assistant_message = {
            "role": "assistant", 
            "content": response_content
        }

        st.session_state.messages.append(assistant_message)
        
        # L∆∞u l·ªãch s·ª≠ tr√≤ chuy·ªán v√†o file
        save_chat_history(st.session_state.messages)
    
if __name__ == "__main__":
    main()

# to run the app, use the command: python.exe -m streamlit run app.py